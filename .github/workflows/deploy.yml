name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 🛎️ Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.ORACLE_VM_SSH_KEY }}

    - name: 🤝 Add server to known hosts
      run: |
        SSH_HOST="${{ secrets.ORACLE_VM_HOST }}"
        echo "🔍 Checking SSH_HOST..."
        echo "Length: ${#SSH_HOST}"
        echo "Value (masked): ${SSH_HOST:0:3}***${SSH_HOST: -3}"
        if [ -z "$SSH_HOST" ]; then
          echo "❌ SSH_HOST secret is empty or not set!"
          exit 1
        fi
        SSH_HOST=$(echo "$SSH_HOST" | xargs)
        mkdir -p ~/.ssh
        ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

    - name: 📤 Copy project to server
      run: |
        rsync -az --delete ./ ${{ secrets.ORACLE_VM_USERNAME }}@${{ secrets.ORACLE_VM_HOST }}:/home/${{ secrets.ORACLE_VM_USERNAME }}/angular_cicid_test

    - name: 🚀 Build, Run, and Deploy Docker on remote server
      run: |
        ssh ${{ secrets.ORACLE_VM_USERNAME }}@${{ secrets.ORACLE_VM_HOST }} "
          cd /home/${{ secrets.ORACLE_VM_USERNAME }}/angular_cicid_test

          echo '⛔ Stopping existing container...'
          docker stop angular-cicid-test || true
          docker rm angular-cicid-test || true

          echo '🧹 Removing old image...'
          docker rmi angular-cicid-test:latest || true

          echo '🔨 Building new Docker image...'
          docker build -t angular-cicid-test:latest .

          echo '🚀 Running new container...'
          docker run -d \
            --name angular-cicid-test \
            --restart unless-stopped \
            -p 80:80 \
            angular-cicid-test:latest

          echo '🧼 Cleaning up unused Docker resources...'
          docker image prune -f

          echo '✅ Deployment complete.'
        "

    - name: ❤️ Health check
      run: |
        echo "⏳ Waiting for the application to start..."
        sleep 20
        if curl -f http://${{ secrets.ORACLE_VM_HOST }}; then
          echo "✅ Application is healthy and responding"
        else
          echo "❌ Application health check failed"
          exit 1
        fi
